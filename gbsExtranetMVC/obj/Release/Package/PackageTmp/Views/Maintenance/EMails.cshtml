@using Resources
@using mailColumnCaptions
@using MessageColumnCaptions


@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<script>
    function RefreshGrid(e) {
        this.read();
    }


</script>
<style type="text/css">
    /*a{
        text-decoration:underline;
    }*/
    .col-md-1 {
        width: 12.666667%;
    }
</style>

<h1 style="color: black; text-align:center">@MessageColumnCaptions.DynamicPageName("BizTbl_MailQueue")</h1>

<div class="jumbotron" style="text-align: left; margin-bottom: 50px;border-radius:8px;padding: 10px;font-size: 15px;font-weight: 100;line-height: 1.142857;">
    <div class="row">
        <div class="col-md-12">
            <div class="col-md-6 col-sm-4" style="display: flex; padding-left: 7px;">

                <div class="col-md-2 col-sm-3">
                <label style="width: 40px; padding-top: 7px;">@mailColumnCaptions.Template</label>
                </div>
                
                <div class="col-md-9 col-sm-9">
                    <input id="drpPart" class="k-textbox" style="width: 100%;" />
                </div>
                </div>
            
            <div class="col-md-2 col-sm-3" style="display: flex; padding-left: 5px;">
                <label style="width: 60px; padding-top: 7px;">@mailColumnCaptions.MailTo</label>
                <input id="txtMailTo" type="text" class="k-textbox" style="width:80%" placeholder="@mailColumnCaptions.MailTo" />
            </div>
            <div class="col-md-2 col-sm-3" style="display: flex">
                <label style="width: 73px; padding-top: 7px;">@mailColumnCaptions.Subject</label>
                    <input id="txtSubject" type="text" class="k-textbox" style="width:80%" placeholder="@mailColumnCaptions.Subject" />
            </div>
            <div class="col-md-2  col-sm-2">
                <label>@mailColumnCaptions.SentStatus</label>
                <input type="checkbox" id="chkStatus" />
            </div>
        </div>
    </div>
    <div class="row" style="padding-top:20px;">
        <div class="col-md-12" style="padding: 8px;">
           
            <div class="col-md-3  col-sm-3" style="padding: 0px; display: flex">
                <label style="width: 170px; padding-left: 14px;  ">@mailColumnCaptions.SendingDate (@Resources.FilterLowerLimitDescription)</label>
                <input type="text" id="datetimepickerStart" placeholder="@Resources.DateFieldDescription" style="width: 80%;  height: 23px; " />

            </div>
            <div class="col-md-3 col-sm-3" style=" display: flex; ">
                <label style="width: 140px;  ">@mailColumnCaptions.SendingDate (@Resources.FilterUpperLimitDescription)</label>
                    
                    <input type="text" id="datetimepickerEnd" placeholder="@Resources.DateFieldDescription" style="width: 90%; height: 23px; " />


            </div>
            <div class="col-md-2  col-sm-2" style="padding-left: 5px; display: flex; ">

                    <label style="padding-top: 7px; padding-right: 5px; ">@mailColumnCaptions.Record</label>

                    <input id="txtRecordID" type="text" class="k-textbox" style="width:100%" placeholder="@mailColumnCaptions.Record" />


            </div>
            <div class="col-md-2  col-sm-2" style="padding:0px;">
                <button id="btnfilter" style="background: #25A6E1; color: white" class="k-button btn btn-info"  onclick="Filter()">@Resources.Filter</button>
                <button class="k-button btn btn-info" style="background: #25A6E1; color:white" id="btnClearFilter" onclick="clearFiter()">@Resources.RemoveFilter</button>
            </div>
        </div>
    </div>
</div>

@(Html.Kendo().Grid<gbsExtranetMVC.Models.Repositories.EmailExt>()
            .Name("Email_Grid")
        .DataSource(dataSource => dataSource
        .Ajax()
        .PageSize(25)
         .Events(events => events.Error("onError").Sync("RefreshGrid"))
        .ServerOperation(true)
            //.Resizable(resizable => resizable.Content(true).Toolbar(true))
        .Model(model =>
        {
            model.Id(p => p.ID);
            model.Field(p => p.ID).Editable(false);
        })
            .Create(update => update.Action("_Create", "EMails"))
            .Read(read => read.Action("_Read", "EMails"))
            .Update(update => update.Action("_Update", "EMails"))
            .Destroy(destroy => destroy.Action("_Destroy", "EMails"))
        )
                .Columns(columns =>
                {
                   // columns.Command(
                   //command =>
                   //{
                   //    command.Edit().UpdateText(Resources.Update).CancelText(Resources.Cancel).Text(Resources.Edit);
                   //    command.Destroy().Text(Resources.Delete);
                   //}).Locked(true).Width(180);
                    columns.Bound("").Title(Resources.Operation).Sortable(false).Width(150).ClientTemplate("<div style='text-align:center;'> <a href='/EMails/Edit/#=ID#' title='Click here to Edit this Record'><img src='/Image/update.png' style='width:30px;cursor:pointer;' alt='update'></a> # # <img title='Delete' onclick='DeleteEmail(#=ID#)' src='/Images/delete.png' style='width:30px;cursor:pointer;' alt='delete'> </div>").Locked(true);
                    columns.Bound(p => p.ID).ClientTemplate("<a href='/EMails/Edit/#=ID#' title='Click here to Edit this Record'>#=ID#</a>").Width(80).Locked(true);
                    columns.Bound(p => p.Template).Title(mailColumnCaptions.Template).EditorTemplateName("ddlTemplate").Width(350);
                    columns.Bound(p => p.MailFrom).Title(mailColumnCaptions.MailFrom).Width(150);
                    columns.Bound(p => p.MailTo).Title(mailColumnCaptions.MailTo).EditorTemplateName("TextArea").Width(200);
                    columns.Bound(p => p.MailCC).Title(mailColumnCaptions.MailCC).EditorTemplateName("TextArea").Width(200);
                    columns.Bound(p => p.Subject).Title(mailColumnCaptions.Subject).EditorTemplateName("TextArea").Width(200);
                    columns.Bound(p => p.Content).Title(mailColumnCaptions.Content).Encoded(false).Width(800);
                    columns.Bound(p => p.SentStatus).Title(mailColumnCaptions.SentStatus).EditorTemplateName("Checkbox").ClientTemplate("<div style='text-align:center;'> #if(SentStatus){# <img src='/Images/checked.gif' alt='checked'> #} else {# <img src='/Images/red_cross.png' alt='redCross'> #}# </div>").Width(120);
                    columns.Bound(p => p.ResentCount).Title(mailColumnCaptions.ResentCount).Width(100);
                    columns.Bound(p => p.SendingDate).ClientTemplate("#= kendo.toString(SendingDate,'dd/MM/yyyy HH:mm:ss') #").Title(mailColumnCaptions.SendingDate).Width(150);
                    columns.Bound(p => p.Record).Title(mailColumnCaptions.Record).Width(120);
                })
                .ToolBar(tool =>
                {
                    tool.Custom().Name("cmdAddNewRecord")
                   .Text(Resources.NewRecord)
                   .HtmlAttributes(new { @id = "cmdAddNewRecord" });
                    tool.Excel();
                })
                .Editable(editable => editable.Mode(GridEditMode.PopUp))
                .Pageable(p => p.Refresh(true))
                .Sortable()
                .Navigatable()
                .Groupable()
                .Scrollable(scr => scr.Height(1000))
                .Filterable()
                .Excel(excel => excel
                .FileName("EMails.xlsx")
                .Filterable(true))

)

<script id="AddNewRecord">

    $("#cmdAddNewRecord").click(function (e) {

        location.href = '/EMails/Create';
        //var table = $("#Email_Grid").data("kendoGrid");
        //var sorting = table.dataSource.sort();

        //if (sorting) {
        //    table.dataSource.sort(null);
        //}
        //table.addRow();
        e.preventDefault();
        //put custom logic here
    });


    function clearFiter() {
        $("form.k-filter-menu button[type='reset']").trigger("click");
    }
</script>





<script>

    $("#btnfilter").click(function () {
        $filter = new Array();
        $MailTo = $("#txtMailTo").val();
        $Subject = $("#txtSubject").val();
        $SentStatus = "false";
        if ($('#chkStatus').prop('checked')) {
            $SentStatus = "true";
        }
       

        //alert($SentStatus)
        $StartDate = $("#datetimepickerStart").data("kendoDatePicker").value();
        $EndDate = $("#datetimepickerEnd").data("kendoDatePicker").value();
        $Record = $("#txtRecordID").val();
        //alert($SentStatus)
        $PartText = $("#drpPart").data("kendoDropDownList").text();
        $PartValue = $("#drpPart").val();
        // $Part1 = $("#drpPart").data("kendoDropDownList").value();
        //alert($PartText)
       

        if ($MailTo) {
            $filter.push({ field: "MailTo", operator: "contains", value: $MailTo});
        }
        if ($Subject) {
            $filter.push({ field: "Subject", operator: "contains", value: $Subject});
        }
        if ($SentStatus == "true") {
            //alert($SentStatus)
            $filter.push({ field: "SentStatus", operator: "eq", value: $SentStatus });
        }
        if ($StartDate) {
            $filter.push({ field: "SendingDate", operator: "IsGreaterThanOrEqualTo", value: $StartDate });
        }
        if ($EndDate) {
            $filter.push({ field: "SendingDate", operator: "IsLessThanOrEqualTo", value: $EndDate });
        }
        if ($Record) {
            $filter.push({ field: "Record", operator: "equals", value: $Record});
        }
        //alert($Record)
        if ($PartValue) {
            $filter.push({ field: "MailTemplateID", operator: "equals", value: $PartValue });
        }
        //alert($Record)
        var grid = $("#Email_Grid").data("kendoGrid");
        grid.dataSource.filter($filter);
    });



    $(document).ready(function () {
        // create DateTimePicker from input HTML element
        //$("#datetimepicker").kendoDateTimePicker({
        //    value: new Date()
        //});



        $("#datetimepickerStart").kendoDatePicker({
            animation: {
                close: {
                    effects: "zoom:out",
                    duration: 300
                }
            }
        });
        $("#datetimepickerEnd").kendoDatePicker({
            animation: {
                close: {
                    effects: "zoom:out",
                    duration: 300
                }
            }
        });



        var json = {}
        $.ajax({
            type: "GET",
            url: "/Emails/_ReadPart",
            data: json,
            datatype: "json",
            success: function (data) {
                //alert(data)
                $("#drpPart").kendoDropDownList({
                    filter: "contains",
                    Name: "TemplateID",
                    optionLabel: "All...",
                    dataTextField: "Name",
                    dataValueField: "ID ",
                    // dataValueField: "Name",
                    dataSource: data
                });

            }
        })
    });



    function clearFiter() {
        $("form.k-filter-menu button[type='reset']").trigger("click");
    }

    $("#btnClearFilter").click(function (e) {
        e.preventDefault();
        var datasource = $("#Email_Grid").data("kendoGrid").dataSource;
        //Clear Custom filters:
        datasource.filter([]);
        //Clear Fields
        $("#txtMailTo").val('')
        $("#txtSubject").val('');
        document.getElementById('chkStatus').checked = false
        var dropdownlist = $("#drpPart").data("kendoDropDownList");
        dropdownlist.select("");
        //$("#datetimepickerStart").val('');
        //$("#datetimepickerEnd").val('');
        $("#datetimepickerStart").data("kendoDatePicker").value(null);
        $("#datetimepickerEnd").data("kendoDatePicker").value(null);
        $("#txtRecordID").val('');

        //document.getElementById('ChkFilterCommon').checked = false
    });

    var DeleteMessage = '@Resources.DeleteConfirmWarning';
   // alert(DeleteMessage)
    function DeleteEmail(ID) {
      //  alert(ID)
        var Result = confirm(DeleteMessage);
      //  alert(Result)
        if (Result) {
            var json = { ID: ID }

            $.ajax({
                type: "GET",
                url: "/EMails/DeleteEMail",
                data: json,
                datatype: "json",
                success: function (data) {

                }
            })

        }


    }

</script>



<script>
    (function (i, s, o, g, r, a, m) {
        i['GoogleAnalyticsObject'] = r; i[r] = i[r] || function () {
            (i[r].q = i[r].q || []).push(arguments)
        }, i[r].l = 1 * new Date(); a = s.createElement(o),
        m = s.getElementsByTagName(o)[0]; a.async = 1; a.src = g; m.parentNode.insertBefore(a, m)
    })(window, document, 'script', '//www.google-analytics.com/analytics.js', 'ga');

    ga('create', 'UA-63530100-1', 'auto');
    ga('send', 'pageview');

</script>



