@using Resources
@using MessageColumnCaptions
@using mailColumnCaptions


<h1 style="text-align:center;">@MessageColumnCaptions.DynamicPageName("TB_BusinessPartnerHistory")</h1>

<div class="jumbotron" style="text-align: left; margin-bottom: 50px;border-radius:8px;padding: 10px;font-size: 15px;font-weight: 100;line-height: 1.142857;">
    <div class="row">
        <div class="col-md-12">
            <div class="col-md-4 col-sm-3" style="display: inline-flex;">
                <label style="width: 150px;margin-top: 6px;">@Resources.BusinessPartnerID</label>
                <input id="txtBusinessPartnerID" class="form-control" type="text" style="width:100%" />
            </div>
            <div class="col-md-4 col-sm-3" style="display: inline-flex;">
                <label>@Resources.Name</label>&nbsp;&nbsp;
                &nbsp;<input type="text" id="txtName" class="form-control" style="width: 100%;" />
            </div>
        </div>
        <br />
        <br />
        <br />
        <div class="col-md-12">
            <div class="col-md-3  col-sm-3" style="padding: 0px;">
                <div class="col-md-6  col-sm-6" style="padding: 8px;">
                    <label>@MessageColumnCaptions.LogDate (@Resources.FilterLowerLimitDescription)</label>
                </div>
                <div class="col-md-6  col-sm-6" style="padding: 8px;">
                    <input type="text" id="datetimepickerStart" placeholder="@Resources.DateFieldDescription" style="width: 100%;" />
                </div>

            </div>
            <div class="col-md-3 col-sm-3" style="padding: 0px;">

                <div class="col-md-6  col-sm-6" style="padding: 8px;">
                    <label>@MessageColumnCaptions.LogDate (@Resources.FilterUpperLimitDescription)</label>
                </div>
                <div class="col-md-6  col-sm-6" style="padding: 8px;">
                    <input type="text" id="datetimepickerEnd" placeholder="@Resources.DateFieldDescription" style="width: 100%;" />
                </div>

            </div>
            <div class="col-md-3  col-sm-3" style="padding: 10px;">
                <button id="btnfilter" class="k-button btn btn-info" onclick="Filter()">@Resources.Filter</button>
                <button class="k-button btn btn-info" id="btnClearFilter" onclick="clearFiter()">@Resources.RemoveFilter</button>
            </div>
        </div>
    </div>

</div>

@(Html.Kendo().Grid<gbsExtranetMVC.Models.Repositories.TB_BusinessPartnerHistoryExt>()
        .Name("TB_BusinessPartnerHistoryExt_Grid")
        .DataSource(dataSource => dataSource
        .Ajax()
        .PageSize(25)
        .ServerOperation(true)
        .Model(model =>
        {
            model.Id(p => p.ID);
            model.Field(p => p.ID).Editable(false);
        })
            //.Create(update => update.Action("_Create", "TB_ChannelManager"))
           .Read(read => read.Action("_Read", "TB_BusinessPartnerHistory", new { TableID = (int)ViewBag.TableID }))
        // .Update(update => update.Action("_Update", "TB_ChannelManager"))
        //.Destroy(destroy => destroy.Action("_Destroy", "TB_ChannelManager"))
        )

                    .Columns(columns =>
                    {
                       
                        columns.Bound(p => p.ID).Width(100).Locked(true); //EditorTemplateName (/Shared/EditorTempaltes/ddlCountries) used to Display Dropdown list and it will return Int value to Controller
                        columns.Bound(p => p.BusinessPartnerID).Title(MessageColumnCaptions.TB_BusinessPartnerHistoryCaption("BusinessPartnerID")).Width(200);
                        columns.Bound(p => p.BusinessPartnerType).Title(MessageColumnCaptions.TB_BusinessPartnerHistoryCaption("BusinessPartnerTypeID")).Width(200);
                        columns.Bound(p => p.Firm).Title(MessageColumnCaptions.TB_BusinessPartnerHistoryCaption("FirmID")).Width(200);
                        columns.Bound(p => p.Country).Title(MessageColumnCaptions.TB_BusinessPartnerHistoryCaption("CountryID")).Width(200);
                        columns.Bound(p => p.City).Title(MessageColumnCaptions.TB_BusinessPartnerHistoryCaption("CityID")).Width(200);
                        columns.Bound(p => p.Name).Title(MessageColumnCaptions.TB_BusinessPartnerHistoryCaption("Name")).Width(200);
                        columns.Bound(p => p.Description).Title(MessageColumnCaptions.TB_BusinessPartnerHistoryCaption("Description_en")).Width(200);
                        columns.Bound(p => p.Address).Title(MessageColumnCaptions.TB_BusinessPartnerHistoryCaption("Address")).Width(200);
                        columns.Bound(p => p.Phone).Title(MessageColumnCaptions.TB_BusinessPartnerHistoryCaption("Phone")).Width(200);
                        columns.Bound(p => p.Fax).Title(MessageColumnCaptions.TB_BusinessPartnerHistoryCaption("Fax")).Width(200);
                        columns.Bound(p => p.PostCode).Title(MessageColumnCaptions.TB_BusinessPartnerHistoryCaption("PostCode")).Width(200);
                        columns.Bound(p => p.WebAddress).Title(MessageColumnCaptions.TB_BusinessPartnerHistoryCaption("WebAddress")).Width(200);
                        columns.Bound(p => p.Email).Title(MessageColumnCaptions.TB_BusinessPartnerHistoryCaption("Email")).Width(200);
                        columns.Bound(p => p.TransferCostCurrency).Title(MessageColumnCaptions.TB_BusinessPartnerHistoryCaption("TransferCostCurrencyID")).Width(200);
                        columns.Bound(p => p.TransferCurrency).Title(MessageColumnCaptions.TB_BusinessPartnerHistoryCaption("TransferCurrencyID")).Width(200);
                        columns.Bound(p => p.TransferDepositType).Title(MessageColumnCaptions.TB_BusinessPartnerHistoryCaption("TransferDepositTypeID")).Width(200);
                        columns.Bound(p => p.TourCostCurrency).Title(MessageColumnCaptions.TB_BusinessPartnerHistoryCaption("TourCostCurrencyID")).Width(200);
                        columns.Bound(p => p.TourCurrency).Title(MessageColumnCaptions.TB_BusinessPartnerHistoryCaption("TourCurrencyID")).Width(200);
                        columns.Bound(p => p.TourDepositType).Title(MessageColumnCaptions.TB_BusinessPartnerHistoryCaption("TourDepositTypeID")).Width(200);
                        columns.Bound(p => p.DealCostCurrency).Title(MessageColumnCaptions.TB_BusinessPartnerHistoryCaption("DealCostCurrencyID")).Width(200);
                        columns.Bound(p => p.DealCurrency).Title(MessageColumnCaptions.TB_BusinessPartnerHistoryCaption("DealCurrencyID")).Width(200);
                        columns.Bound(p => p.DealDepositType).Title(MessageColumnCaptions.TB_BusinessPartnerHistoryCaption("DealDepositTypeID")).Width(200);
                        columns.Bound(p => p.HitCount).Title(MessageColumnCaptions.TB_BusinessPartnerHistoryCaption("HitCount")).Width(200);
                        columns.Bound(p => p.Sorts).Title(MessageColumnCaptions.TB_BusinessPartnerHistoryCaption("Sort")).Width(200);
                        columns.Bound(p => p.Status).Title(MessageColumnCaptions.TB_BusinessPartnerHistoryCaption("StatusID")).Width(200);
                        columns.Bound(p => p.Active).Title(MessageColumnCaptions.TB_BusinessPartnerHistoryCaption("Active"))
                            .ClientTemplate("<div style='text-align:center;'> #if(Active){# <img src='/Images/checked.gif' alt='checked'> #} else {# <img src='/Images/red_cross.png' alt='redCross'> #}# </div>").Width(120);
                        columns.Bound(p => p.CreateDate).Title(MessageColumnCaptions.TB_BusinessPartnerHistoryCaption("CreateDateTime")).ClientTemplate("#= kendo.toString(CreateDate,'dd/MM/yyyy HH:mm:ss') #").Width(200);
                        columns.Bound(p => p.IPAddress).Title(MessageColumnCaptions.TB_BusinessPartnerHistoryCaption("IPAddress")).Width(200);
                        columns.Bound(p => p.LogDate).Title(MessageColumnCaptions.TB_BusinessPartnerHistoryCaption("LogDateTime")).ClientTemplate("#= kendo.toString(LogDate,'dd/MM/yyyy HH:mm:ss') #").Width(120);
                        columns.Bound(p => p.LogUser).Title(MessageColumnCaptions.TB_BusinessPartnerHistoryCaption("LogUserID")).Width(120);
                    })
                .ToolBar(tool =>
                {
                //    tool.Custom().Name("cmdAddNewRecord")
                //.Text(Resources.NewRecord)
                //.HtmlAttributes(new { @id = "cmdAddNewRecord" });
                    tool.Excel().Text(Resources.ExporttoExcel);
                })
                .Editable(editable => editable.Mode(GridEditMode.InLine))
                    .Scrollable(scrollable => scrollable.Height(430))
        //.Scrollable().HtmlAttributes(new { @style = "width:1200px;" })

                .Pageable(p => p.Refresh(true))
                .Sortable()
                .Navigatable()
                .Groupable()
                .Scrollable(scr => scr.Height(370))
                .Filterable()
                .Excel(excel => excel
                .FileName("TB_BusinessPartnerHistoryExt.xlsx")
                .Filterable(true))

)

<script id="AddNewRecord">

    $("#cmdAddNewRecord").click(function (e) {

        var table = $("#TB_BusinessPartnerHistoryExt_Grid").data("kendoGrid");
        var sorting = table.dataSource.sort();

        if (sorting) {
            table.dataSource.sort(null);
        }
        table.addRow();
        e.preventDefault();
        //put custom logic here
    });
</script>


<script>

    $("#btnfilter").click(function () {
        $filter = new Array();

        $BusinessPartnerID = $("#txtBusinessPartnerID").val();
        $Name = $("#txtName").val();
        $StartDate = $("#datetimepickerStart").data("kendoDatePicker").value();
        $EndDate = $("#datetimepickerEnd").data("kendoDatePicker").value();


        if ($BusinessPartnerID) {
            $filter.push({ field: "BusinessPartnerID", operator: "equals", value: String($BusinessPartnerID) });
        }
        if ($Name) {
            $filter.push({ field: "Name", operator: "equals", value: String($Name) });
        }
        if ($StartDate) {
            $filter.push({ field: "LogDate", operator: "IsGreaterThanOrEqualTo", value: $StartDate });
        }
        if ($EndDate) {
            $filter.push({ field: "LogDate", operator: "IsLessThanOrEqualTo", value: $EndDate });
        }

        var grid = $("#TB_BusinessPartnerHistoryExt_Grid").data("kendoGrid");
        grid.dataSource.filter($filter);
    });

    $(document).ready(function () {

        $("#datetimepickerStart").kendoDatePicker({
            animation: {
                close: {
                    effects: "zoom:out",
                    duration: 300
                }
            }
        });
        $("#datetimepickerEnd").kendoDatePicker({
            animation: {
                close: {
                    effects: "zoom:out",
                    duration: 300
                }
            }
        });


    });


    function clearFiter() {
        $("form.k-filter-menu button[type='reset']").trigger("click");
    }

    $("#btnClearFilter").click(function (e) {
        e.preventDefault();
        var datasource = $("#TB_BusinessPartnerHistoryExt_Grid").data("kendoGrid").dataSource;
        //Clear Custom filters:
        datasource.filter([]);
        //Clear Fields
        $("#txtBusinessPartnerID").val('')
        $("#txtName").val('');
        //$("#txtGuestName").val('');
        $("#datetimepickerStart").data("kendoDatePicker").value(null);
        $("#datetimepickerEnd").data("kendoDatePicker").value(null);
        //document.getElementById('chkStatus').checked = false
    });

</script>













