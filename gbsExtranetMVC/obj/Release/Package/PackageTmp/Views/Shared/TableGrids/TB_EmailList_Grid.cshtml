
@using Resources
@using MessageColumnCaptions
@using mailColumnCaptions


<h1 style="text-align:center;">@MessageColumnCaptions.DynamicPageName("TB_EmailList")</h1>

<div class="jumbotron" style="text-align: left; margin-bottom: 50px;border-radius:8px;padding: 10px;font-size: 15px;font-weight: 100;line-height: 1.142857;">
    <div class="row">
        <div class="col-md-12">

            <div class="col-md-3 col-sm-3" style="display: inline-flex;">
                <label style="width: 100px;margin-top: 6px;">@Resources.Email</label>
                <input id="txtEmail" type="text" style="width:100%" class="form-control" placeholder="@Resources.Email"/>
            </div>
            
            <div class="col-md-3  col-sm-3" style="padding: 10px;">
                <button id="btnfilter" class="btn btn-info" onclick="Filter()">@Resources.Filter</button>
                <button class="btn btn-info" id="btnClearFilter" onclick="clearFiter()">@Resources.RemoveFilter</button>
            </div>
        </div>

    </div>

</div>

<script>
    function RefreshGrid(e) {
        this.read();
    }
</script>

@(Html.Kendo().Grid<gbsExtranetMVC.Models.Repositories.TB_EmailListExt>()
                .Name("TB_EmailListExt_Grid")
        .DataSource(dataSource => dataSource
        .Ajax()
        .PageSize(25)
        .Events(events => events.Error("onError").Sync("RefreshGrid"))
        .ServerOperation(true)
        .Model(model =>
        {
            model.Id(p => p.ID);
            model.Field(p => p.ID).Editable(false);
            //model.Field(p => p.Date).Editable(false);
        })
               .Create(update => update.Action("_Create", "TB_EmailList"))
                .Read(read => read.Action("_Read", "TB_EmailList", new { TableID = (int)ViewBag.TableID }))
                .Update(update => update.Action("_Update", "TB_EmailList"))
                .Destroy(destroy => destroy.Action("_Destroy", "TB_EmailList"))

        )

                .Columns(columns =>
                {
                    columns.Command(

                       command =>
                       {
                           command.Edit().UpdateText(Resources.Update).CancelText(Resources.Cancel).Text(Resources.Edit);
                           command.Destroy().Text(Resources.Delete);
                       }).Locked(true).Width(180);

                    columns.Bound(p => p.ID).Width(170).Locked(true); //EditorTemplateName (/Shared/EditorTempaltes/ddlCountries) used to Display Dropdown list and it will return Int value to Controller
                    columns.Bound(p => p.Email).Title(MessageColumnCaptions.TB_EmailListCaption("Email")).Width(200).Locked(true);
                    columns.Bound(p => p.IPAddress).Title(MessageColumnCaptions.TB_EmailListCaption("IPAddress")).Width(200);
                    columns.Bound(p => p.Active).Title(MessageColumnCaptions.TB_EmailListCaption("Active"))
                    .ClientTemplate("<div style='text-align:center;'> #if(Active){# <img src='/Images/checked.gif' alt='checked'> #} else {# <img src='/Images/red_cross.png' alt='redCross'> #}# </div>").Width(120);


                })
                .ToolBar(tool =>
                {
                    tool.Custom().Name("cmdAddNewRecord")
                  .Text(Resources.NewRecord)
                  .HtmlAttributes(new { @id = "cmdAddNewRecord" });
                    tool.Excel().Text(Resources.ExporttoExcel);
                })
                .Editable(editable => editable.Mode(GridEditMode.InLine))
                    .Scrollable(scrollable => scrollable.Height(430))
                //.Scrollable().HtmlAttributes(new { @style = "width:1200px;" })

                .Pageable(p => p.Refresh(true))
                .Sortable()
                .Navigatable()
                .Groupable()
                .Scrollable(scr => scr.Height(370))
                .Filterable()
                .Excel(excel => excel
                .FileName("TB_EmailListExt.xlsx")
                .Filterable(true))

)

<script id="AddNewRecord">

                $("#cmdAddNewRecord").click(function (e) {

                    var table = $("#TB_EmailListExt_Grid").data("kendoGrid");
                    var sorting = table.dataSource.sort();

                    if (sorting) {
                        table.dataSource.sort(null);
                    }
                    table.addRow();
                    e.preventDefault();
                    //put custom logic here
                });
</script>

<script>
    $("#btnfilter").click(function () {
        $filter = new Array();
        $Email = $("#txtEmail").val();

        if ($Email) {
            $filter.push({ field: "Email", operator: "contains", value: String($Email) });
        }
        var grid = $("#TB_EmailListExt_Grid").data("kendoGrid");
        grid.dataSource.filter($filter);
    });



    function clearFiter() {
        $("form.k-filter-menu button[type='reset']").trigger("click");
    }

    $("#btnClearFilter").click(function (e) {
        e.preventDefault();
        var datasource = $("#TB_EmailListExt_Grid").data("kendoGrid").dataSource;
        datasource.filter([]);
        $("#txtEmail").val('')
    });

</script>






