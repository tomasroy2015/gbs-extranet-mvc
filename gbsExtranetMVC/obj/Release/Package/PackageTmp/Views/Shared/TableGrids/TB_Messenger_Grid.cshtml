@using Resources
@using MessageColumnCaptions

<h1 style="text-align:center;">@MessageColumnCaptions.DynamicPageName("TB_Messenger")</h1>

<div class="jumbotron" style="text-align: left; margin-bottom: 50px;border-radius:8px;padding: 10px;font-size: 15px;font-weight: 100;line-height: 1.142857;">
    <div class="row" style=" margin-top: 15px;margin-bottom: 5px;">
        <div class="col-md-12">
            <div class="col-md-3 col-sm-3">
                <div class="col-md-3 col-sm-3 col-xs-3" style="padding: 5px;">
                    <label>@MessageColumnCaptions.TB_MessengerCaption("From")</label>
                </div>
                <div class="col-md-9 col-sm-9 col-xs-9" style="padding: 5px;">
                    <input id="txtFrom" type="text" class="form-control" style="width:100%" placeholder="@MessageColumnCaptions.TB_MessengerCaption("From")" />
                </div>
            </div>
            <div class="col-md-3 col-sm-3">
                <div class="col-md-3 col-sm-3 col-xs-3" style="padding:5px;">
                    <label>@MessageColumnCaptions.TB_MessengerCaption("To")</label>
                </div>
                <div class="col-md-8 col-sm-8 col-xs-8" style="padding: 5px;">
                    <input id="txtTo" type="text" class="form-control" style="width:100%" placeholder="@MessageColumnCaptions.TB_MessengerCaption("To")" />
                </div>
            </div>           
            <div class="col-md-2  col-sm-2" style="padding: 5px;">
                <button id="btnfilter" class="k-button" onclick="Filter()">@Resources.Filter</button>
                <button class="k-button" id="btnClearFilter" onclick="clearFiter()">@Resources.RemoveFilter</button>
            </div>
        </div>
    </div>
</div>

@(Html.Kendo().Grid<gbsExtranetMVC.Models.Repositories.Tables.TB_MessengerExt>()
                    .Name("TB_MessengerGrid")
        .DataSource(dataSource => dataSource
        .Ajax()
        .PageSize(25)
        .ServerOperation(true)
        .Model(model =>
        {
            model.Id(p => p.ID);
            model.Field(p => p.ID).Editable(false);
        })
                    //.Create(update => update.Action("_Create", "TB_Message"))
                .Read(read => read.Action("_Read", "TB_Messenger", new { TableID = (int)ViewBag.TableID }))
                //.Update(update => update.Action("_Update", "TB_Message"))
                //.Destroy(destroy => destroy.Action("_Destroy", "TB_Message"))
        )

                    .Columns(columns =>
                    {
                        //columns.Command(

                        //    command =>
                        //    {
                        //        command.Edit().UpdateText(Resources.Update).CancelText(Resources.Cancel).Text(Resources.Edit);
                        //        command.Destroy();
                        //    }).Locked(true).Width(180);

                        columns.Bound(p => p.ID).Title("ID").Width(100).Locked(true); //EditorTemplateName (/Shared/EditorTempaltes/ddlCountries) used to Display Dropdown list and it will return Int value to Controller
                        columns.Bound(p => p.From).Title(MessageColumnCaptions.TB_MessengerCaption("From")).Width(150);
                        columns.Bound(p => p.To).Title(MessageColumnCaptions.TB_MessengerCaption("To")).Width(200);
                        columns.Bound(p => p.Message).Title(MessageColumnCaptions.TB_MessengerCaption("Message")).Width(150);
                        columns.Bound(p => p.Sent).Title(MessageColumnCaptions.TB_MessengerCaption("Sent")).ClientTemplate("#= kendo.toString(Sent,'dd/MM/yyyy') #").Width(150);
                        columns.Bound(p => p.Recd).Title(MessageColumnCaptions.TB_MessengerCaption("Recd")).Width(100);                       
                    })
                .ToolBar(tool =>
                {
                   // tool.Custom().Name("cmdAddNewRecord")
                   //.Text(Resources.NewRecord)
                    //.HtmlAttributes(new { @id = "cmdAddNewRecord" });
                    tool.Excel().Text(Resources.ExporttoExcel);
                })
                .Editable(editable => editable.Mode(GridEditMode.InLine))
                    .Scrollable(scrollable => scrollable.Height(430))
        //.Scrollable().HtmlAttributes(new { @style = "width:1200px;" })

                .Pageable(p => p.Refresh(true))
                .Sortable()
                .Navigatable()
                .Groupable()
                .Scrollable(scr => scr.Height(370))
                .Filterable()
                .Excel(excel => excel
                .FileName("TB_MessengerRpt.xlsx")
                .Filterable(true))

)

<script>
    $("#btnfilter").click(function () {
        $filter = new Array();
        $From = $("#txtFrom").val();        
        $To = $("#txtTo").val();      

        if ($From) {
            $filter.push({ field: "From", operator: "equals", value: String($From) });
        }
        if ($To) {
            $filter.push({ field: "To", operator: "equals", value: String($To) });
        }

        var grid = $("#TB_MessengerGrid").data("kendoGrid");
        grid.dataSource.filter($filter);
    });    



    function clearFiter() {
        $("form.k-filter-menu button[type='reset']").trigger("click");
    }

    $("#btnClearFilter").click(function (e) {
        e.preventDefault();
        var datasource = $("#TB_MessengerGrid").data("kendoGrid").dataSource;
        datasource.filter([]);
        $("#txtFrom").val('');
        $("#txtTo").val('');       
    });

</script>

