@using Resources
@using MessageColumnCaptions
@using mailColumnCaptions


<script>
    function RefreshGrid(e) {
        this.read();
    }
</script>

<h1 style="text-align:center;">@MessageColumnCaptions.DynamicPageName("TB_BusinessPartner")</h1>

@*<div class="jumbotron" style="text-align: left; margin-bottom: 50px;border-radius:8px;padding: 10px;font-size: 15px;font-weight: 100;line-height: 1.142857;">
    <div class="row">
        <div class="col-md-12">
            <div class="col-md-4 col-sm-3" style="display: inline-flex;">
                <label>@Resources.BusinessPartner</label>&nbsp;&nbsp;
                &nbsp;<input type="text" id="drbBusiness" style="width: 100%;" />
            </div>
            <div class="col-md-4 col-sm-3" style="display: inline-flex;">
                <label>@Resources.Region</label>&nbsp;&nbsp;
                &nbsp;<input id="drbregion" style="width: 100%;" />
            </div>

            <div class="col-md-3  col-sm-3" style="padding: 10px;">
                <button id="btnfilter" class="btn btn-info" onclick="Filter()">Filter</button>
                <button class="btn btn-info" id="btnClearFilter" onclick="clearFiter()">Clear Filter</button>
            </div>
        </div>
    </div>

</div>*@

@(Html.Kendo().Grid<gbsExtranetMVC.Models.Repositories.TB_BusinessPartnerExt>()
                                    .Name("TB_BusinessPartnerExt_Grid")
        .DataSource(dataSource => dataSource
        .Ajax()
        .PageSize(25)
            .Events(events => events.Error("onError").Sync("RefreshGrid"))
        .ServerOperation(true)
        .Model(model =>
        {
            model.Id(p => p.ID);
            model.Field(p => p.ID).Editable(false);
        })
                .Create(update => update.Action("_Create", "TB_BusinessPartner"))
                .Read(read => read.Action("_Read", "TB_BusinessPartner", new { TableID = (int)ViewBag.TableID }))
                .Update(update => update.Action("_Update", "TB_BusinessPartner"))
                .Destroy(destroy => destroy.Action("_Destroy", "TB_BusinessPartner"))
        )

                        .Columns(columns =>
                        {
                            columns.Command(

                               command =>
                               {
                                   command.Edit().UpdateText(Resources.Update).CancelText(Resources.Cancel).Text(Resources.Edit);
                                   command.Destroy().Text(Resources.Delete);
                               }).Width(170).Locked(true);

                            columns.Bound(p => p.ID).Width(100).Locked(true); //EditorTemplateName (/Shared/EditorTempaltes/ddlCountries) used to Display Dropdown list and it will return Int value to Controller
                            columns.Bound(p => p.BusinessPartnerType).EditorTemplateName("GetBusinessPartnerType").Title(MessageColumnCaptions.TB_BusinessPartnerHistoryCaption("BusinessPartnerTypeID")).Width(200).Locked(true);
                            columns.Bound(p => p.Firm).EditorTemplateName("Firm").Title(MessageColumnCaptions.TB_BusinessPartnerHistoryCaption("FirmID")).Width(200);
                            columns.Bound(p => p.Country).EditorTemplateName("ddlCountries").Title(MessageColumnCaptions.TB_BusinessPartnerHistoryCaption("CountryID")).Width(200);
                            columns.Bound(p => p.City).EditorTemplateName("Cities").Title(MessageColumnCaptions.TB_BusinessPartnerHistoryCaption("CityID")).Width(200);
                            columns.Bound(p => p.Name).Title(MessageColumnCaptions.TB_BusinessPartnerHistoryCaption("Name")).Width(200);
                            columns.Bound(p => p.Description).Title(MessageColumnCaptions.TB_BusinessPartnerHistoryCaption("Description_en")).Width(200);
                            columns.Bound(p => p.Address).Title(MessageColumnCaptions.TB_BusinessPartnerHistoryCaption("Address")).Width(200);
                            columns.Bound(p => p.Phone).Title(MessageColumnCaptions.TB_BusinessPartnerHistoryCaption("Phone")).Width(200);
                            columns.Bound(p => p.Fax).Title(MessageColumnCaptions.TB_BusinessPartnerHistoryCaption("Fax")).Width(200);
                            columns.Bound(p => p.PostCode).Title(MessageColumnCaptions.TB_BusinessPartnerHistoryCaption("PostCode")).Width(200);
                            columns.Bound(p => p.WebAddress).Title(MessageColumnCaptions.TB_BusinessPartnerHistoryCaption("WebAddress")).Width(200);
                            columns.Bound(p => p.Email).Title(MessageColumnCaptions.TB_BusinessPartnerHistoryCaption("Email")).Width(200);
                            columns.Bound(p => p.TransferCostCurrency).EditorTemplateName("GetTransferCostCurrency").Title(MessageColumnCaptions.TB_BusinessPartnerHistoryCaption("TransferCostCurrencyID")).Width(200);
                            columns.Bound(p => p.TransferCurrency).EditorTemplateName("GetTransferCurrency").Title(MessageColumnCaptions.TB_BusinessPartnerHistoryCaption("TransferCurrencyID")).Width(200);
                            columns.Bound(p => p.TransferDepositType).EditorTemplateName("GetTransferDepositType").Title(MessageColumnCaptions.TB_BusinessPartnerHistoryCaption("TransferDepositTypeID")).Width(200);
                            columns.Bound(p => p.TourCostCurrency).EditorTemplateName("GetTourCostCurrency").Title(MessageColumnCaptions.TB_BusinessPartnerHistoryCaption("TourCostCurrencyID")).Width(200);
                            columns.Bound(p => p.TourCurrency).EditorTemplateName("GetTourCurrency").Title(MessageColumnCaptions.TB_BusinessPartnerHistoryCaption("TourCurrencyID")).Width(200);
                            columns.Bound(p => p.TourDepositType).EditorTemplateName("GetTourDepositType").Title(MessageColumnCaptions.TB_BusinessPartnerHistoryCaption("TourDepositTypeID")).Width(200);
                            columns.Bound(p => p.DealCostCurrency).EditorTemplateName("GetDealCostCurrency").Title(MessageColumnCaptions.TB_BusinessPartnerHistoryCaption("DealCostCurrencyID")).Width(200);
                            columns.Bound(p => p.DealCurrency).EditorTemplateName("GetDealCurrency").Title(MessageColumnCaptions.TB_BusinessPartnerHistoryCaption("DealCurrencyID")).Width(200);
                            columns.Bound(p => p.DealDepositType).EditorTemplateName("GetDealDepositType").Title(MessageColumnCaptions.TB_BusinessPartnerHistoryCaption("DealDepositTypeID")).Width(200);
                            columns.Bound(p => p.HitCount).Title(MessageColumnCaptions.TB_BusinessPartnerHistoryCaption("HitCount")).Width(200);
                            columns.Bound(p => p.Sorts).Title(MessageColumnCaptions.TB_BusinessPartnerHistoryCaption("Sort")).Width(200);
                            columns.Bound(p => p.Status).EditorTemplateName("ddlTypeStatus").Title(MessageColumnCaptions.TB_BusinessPartnerHistoryCaption("StatusID")).Width(200);
                            columns.Bound(p => p.Active).Title(MessageColumnCaptions.TB_BusinessPartnerHistoryCaption("Active"))
                                .ClientTemplate("<div style='text-align:center;'> #if(Active){# <img src='/Images/checked.gif' alt='checked'> #} else {# <img src='/Images/red_cross.png' alt='redCross'> #}# </div>").Width(120);
                            columns.Bound(p => p.IPAddress).Title(MessageColumnCaptions.TB_BusinessPartnerHistoryCaption("IPAddress")).Width(200);


                        })
                .ToolBar(tool =>
                {
                 tool.Custom().Name("cmdAddNewRecord")
                .Text(Resources.NewRecord)
                .HtmlAttributes(new { @id = "cmdAddNewRecord" });
                    tool.Excel().Text(Resources.ExporttoExcel);
                })
                .Editable(editable => editable.Mode(GridEditMode.InLine))
                    .Scrollable(scrollable => scrollable.Height(430))
        //.Scrollable().HtmlAttributes(new { @style = "width:1200px;" })

                .Pageable(p => p.Refresh(true))
                .Sortable()
                .Navigatable()
                .Groupable()
                .Scrollable(scr => scr.Height(370))
                .Filterable()
                .Excel(excel => excel
                .FileName("TB_BusinessPartnerExt.xlsx")
                .Filterable(true))

)

<script id="AddNewRecord">

    $("#cmdAddNewRecord").click(function (e) {

        var table = $("#TB_BusinessPartnerExt_Grid").data("kendoGrid");
        var sorting = table.dataSource.sort();

        if (sorting) {
            table.dataSource.sort(null);
        }
        table.addRow();
        e.preventDefault();
        //put custom logic here
    });
</script>













