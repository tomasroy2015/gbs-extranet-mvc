@using Resources
@using BankColumnCaption
@using MessageColumnCaptions
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<script>
    function RefreshGrid(e) {
        this.read();
    }
</script>

<h1 style="color: black; text-align:center">@MessageColumnCaptions.DynamicPageName("TB_Bank")</h1>

<div class="jumbotron" style="text-align: left; margin-bottom: 50px;border-radius:8px;padding: 10px;font-size: 15px;font-weight: 100;line-height: 1.142857;">
    <div class="row">
        <div class="col-md-12">
            <div class="col-md-4 col-sm-4">
                <div class="col-md-4 col-sm-4" style="padding: 15px;">
                    <label>@BankColumnCaption.Country</label>
                </div>
                <div class="col-md-8 col-sm-8 " style="padding: 8px;">
                    <input id="drpPart" style="width: 100%;" />
                </div>
            </div>
            <div class="col-md-4 col-sm-4">
                <div class="col-md-3 col-sm-3 " style="padding: 15px;">
                    <label>@BankColumnCaption.BankName</label>
                </div>
                <div class="col-md-8 col-sm-8 " style="padding: 8px;">
                    <input id="txtBankName" type="text" class="k-textbox" style="width:100%" placeholder="@BankColumnCaption.BankName" />
                </div>

            </div>
            <div class="col-md-4 col-sm-4" style="padding: 10px;">
                <button id="btnfilter" class="k-button btn btn-info" onclick="Filter()">@Resources.Filter</button>
                <button id="btnRemovefilter" class="k-button btn btn-info" onclick="clearFiter()">@Resources.FilterRemove</button>
            </div>
        </div>
    </div>
</div>


    @(Html.Kendo().Grid<gbsExtranetMVC.Models.Repositories.BankExt>()
            .Name("Bank_Grid")
        .DataSource(dataSource => dataSource
        .Ajax()
        .PageSize(25)
        .Events(events => events.Error("onError").Sync("RefreshGrid"))
        .ServerOperation(true)
        .Model(model =>
        {
            model.Id(p => p.ID);
            model.Field(p => p.ID).Editable(false);
        })
            .Create(update => update.Action("_Create", "Bank"))
            .Read(read => read.Action("_Read", "Bank"))
            .Update(update => update.Action("_Update", "Bank"))
            .Destroy(destroy => destroy.Action("_Destroy", "Bank"))

        )

                    .Columns(columns =>
                    {
                        columns.Command(

                           command =>
                           {
                               command.Edit().UpdateText(Resources.Update).CancelText(Resources.Cancel).Text(Resources.Edit);
                               command.Destroy().Text(Resources.Delete);
                           }).Locked(true).Width(180);

                        columns.Bound(p => p.ID).Width(50).Locked(true); //EditorTemplateName (/Shared/EditorTempaltes/ddlCountries) used to Display Dropdown list and it will return Int value to Controller
                        columns.Bound(p => p.Country).EditorTemplateName("ddlCountries").Title(BankColumnCaption.Country).Width(250).Locked(true);
                        columns.Bound(p => p.Currency).Title(BankColumnCaption.Currency).EditorTemplateName("ddlCurrencies").Width(150);
                        columns.Bound(p => p.Bank).Title(BankColumnCaption.BankName).Width(150);
                        columns.Bound(p => p.BankBranch).Title(BankColumnCaption.BankBranchName).Width(150);
                        columns.Bound(p => p.BankAccountNumber).Title(BankColumnCaption.BankAccountNumber).Width(150);
                        columns.Bound(p => p.IBAN).Title(BankColumnCaption.IBAN).Width(150);
                        columns.Bound(p => p.SWIFT).Title(BankColumnCaption.SWIFT).Width(150);
                        columns.Bound(p => p.OtherInfo).Title(BankColumnCaption.OtherInfo).Width(150);



                    })
                .ToolBar(tool =>
                {
                    tool.Custom().Name("cmdAddNewRecord")
                   .Text(Resources.NewRecord)
                   .HtmlAttributes(new { @id = "cmdAddNewRecord" });
                    tool.Excel();
                })
                .Editable(editable => editable.Mode(GridEditMode.InLine))
                    .Scrollable(scrollable => scrollable.Height(430))
            //.Scrollable().HtmlAttributes(new { @style = "width:1200px;" })

                .Pageable(p => p.Refresh(true))
                .Sortable()
                .Navigatable()
                .Groupable()
                .Scrollable(scr => scr.Height(370))
                .Filterable()
                .Excel(excel => excel
                .FileName("Bank.xlsx")
                .Filterable(true))

    )

    <script id="AddNewRecord">

        $("#cmdAddNewRecord").click(function (e) {

            var table = $("#Bank_Grid").data("kendoGrid");
            var sorting = table.dataSource.sort();

            if (sorting) {
                table.dataSource.sort(null);
            }
            table.addRow();
            e.preventDefault();
            //put custom logic here
        });
    </script>

<script>

    $("#btnfilter").click(function () {

        $filter = new Array();
        $Subject = $("#txtBankName").val();
      //  alert($Subject)
        $PartText = $("#drpPart").data("kendoDropDownList").text();
        $PartValue = $("#drpPart").val();
       // alert($PartValue)
        if ($Subject) {
            $filter.push({ field: "Bank", operator: "contains", value: String($Subject) });
        }

        if ($PartValue) {
            $filter.push({ field: "Country", operator: "contains", value: $PartText });
        }

        var grid = $("#Bank_Grid").data("kendoGrid");
        grid.dataSource.filter($filter);

    });

    $(document).ready(function () {

        var json = {}
        $.ajax({
            type: "GET",
            url: "/DropDownLists/GetCountries",
            data: json,
            datatype: "json",
            success: function (data) {

                $("#drpPart").kendoDropDownList({
                    filter: "contains",
                    Name: "CountryID",                    
                    dataTextField: "Country",
                    dataValueField: "CountryID",
                    dataSource: data,
                    optionLabel: "All..."
                });

            }
        })        
    });



    function clearFiter() {
        $("form.k-filter-menu button[type='reset']").trigger("click");
    }

    $("#btnRemovefilter").click(function (e) {
        e.preventDefault();
        var datasource = $("#Bank_Grid").data("kendoGrid").dataSource;
        //Clear Custom filters:
        datasource.filter([]);
        //Clear Fields
        $("#txtBankName").val('');

       var dropdownlist = $("#drpPart").data("kendoDropDownList");
       dropdownlist.select("");

    });

    //function clearFiter() {
    //    //alert('hi')
    //    $("form.k-filter-menu button[type='reset']").trigger("click");
    //}



    //$("#btnClearFilter").click(function (e) {
    //    //alert(e)
    //    e.preventDefault();
    //    var datasource = $("#Bank_Grid").data("kendoGrid").dataSource;
    //    datasource.filter([]);
    //    var dropdownlist = $("#drpPart").data("kendoDropDownList");
    //    dropdownlist.select("");
    //    $("#txtBankName").val('');
    //});

</script>

<script>
    (function (i, s, o, g, r, a, m) {
        i['GoogleAnalyticsObject'] = r; i[r] = i[r] || function () {
            (i[r].q = i[r].q || []).push(arguments)
        }, i[r].l = 1 * new Date(); a = s.createElement(o),
        m = s.getElementsByTagName(o)[0]; a.async = 1; a.src = g; m.parentNode.insertBefore(a, m)
    })(window, document, 'script', '//www.google-analytics.com/analytics.js', 'ga');

    ga('create', 'UA-63530100-1', 'auto');
    ga('send', 'pageview');

</script>
