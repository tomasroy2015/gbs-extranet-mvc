


@using Resources
@using MessageColumnCaptions
@using mailColumnCaptions


<h1 style="text-align:center;">@MessageColumnCaptions.DynamicPageName("TB_ExchangeRateHistory")</h1>

<div class="jumbotron" style="text-align: left; margin-bottom: 50px;border-radius:8px;padding: 10px;font-size: 15px;font-weight: 100;line-height: 1.142857;">
    <div class="row">
        <div class="col-md-12">
            <div class="col-md-3 col-sm-3" style="display: inline-flex;">
            <label style="width: 200px;margin-top: 6px;">@MessageColumnCaptions.TB_ExchangeRateHistoryCaption("ExchangeRateID")</label>
            <input id="txtExchangeRateID" class="k-textbox" style="width:80%" type="text"/>
        </div>
            <div class="col-md-3 col-sm-3" style="padding: 0px; display: inline-flex; margin-left: 10px;">
                <label style="width: 100px;margin-top: 6px;">@Resources.Currency</label>
                <input type="text" id="drbCurrency" style="width: 250px;" />
            </div>
            <div class="col-md-3 col-sm-3" style="padding: 0px;display: inline-flex;">
                <label style="width: 75px;margin-top: 6px;">@Resources.Date</label>
                <input type="text" id="drbDate" style="width: 220px" />
            </div>
            
        </div>
        <br />
        <br /><br />
        <div class="col-md-12">
            <div class="col-md-12">
                <label style="width: 240px;">@MessageColumnCaptions.TB_ExchangeRateHistoryCaption("LogDateTime") (@Resources.FilterLowerLimitDescription)</label>

                <input type="text" id="datetimepickerStart" placeholder="@Resources.DateFieldDescription" style="width: 180px;" />

                <label style="width: 180px;margin-left: 10px;">@MessageColumnCaptions.TB_ExchangeRateHistoryCaption("LogDateTime") (@Resources.FilterUpperLimitDescription)</label>

                <input type="text" id="datetimepickerEnd" placeholder="@Resources.DateFieldDescription" style="width: 180px; " />

                <button style="margin-left:10px;" id="btnfilter" class="btn btn-info" onclick="Filter()">@Resources.Filter</button>
                <button style="margin-left:10px;" class="btn btn-info" id="btnClearFilter" onclick="clearFiter()">@Resources.RemoveFilter</button>
            </div>

                

                @*<div class="col-md-4  col-sm-3">

                    <label style="width: 230px; margin-top: 8px; ">@MessageColumnCaptions.TB_ExchangeRateHistoryCaption("LogDateTime") (@Resources.FilterLowerLimitDescription)</label>

                    <input type="text" id="datetimepickerStart" placeholder="@Resources.DateFieldDescription" style="width: 180px;" />

            </div>
            <div class="col-md-4 col-sm-3" style="padding: 0px;">

                    <label style="width: 170px; margin-top: 8px;">@MessageColumnCaptions.TB_ExchangeRateHistoryCaption("LogDateTime") (@Resources.FilterUpperLimitDescription)</label>

                    <input type="text" id="datetimepickerEnd" placeholder="@Resources.DateFieldDescription" style="width: 180px; " />


            </div>
            <div class="col-md-3 col-sm-4">
                <button id="btnfilter" class="btn btn-info" onclick="Filter()">Filter</button>
                <button class="btn btn-info" id="btnClearFilter" onclick="clearFiter()">Clear Filter</button>
            </div>*@
            </div>
    </div>
</div>

@(Html.Kendo().Grid<gbsExtranetMVC.Models.Repositories.TB_ExchangeRateHistoryExt>()
                .Name("TB_ExchangeRateHistoryExt_Grid")
        .DataSource(dataSource => dataSource
        .Ajax()
        .PageSize(25)
        .ServerOperation(true)
        .Model(model =>
        {
            model.Id(p => p.ID);
            //model.Field(p => p.ID).Editable(false);
        })
                //.Create(update => update.Action("_Create", "BizTbl_TableSecurityGroupRight"))
                .Read(read => read.Action("_Read", "TB_ExchangeRateHistory", new { TableID = (int)ViewBag.TableID }))
        //.Update(update => update.Action("_Update", "BizTbl_TableSecurityGroupRight"))
        //.Destroy(destroy => destroy.Action("_Destroy", "BizTbl_TableSecurityGroupRight"))

        )

                .Columns(columns =>
                {
                    columns.Command(

                       command =>
                       {
                           // command.Edit().UpdateText(Resources.Update).CancelText(Resources.Cancel).Text(Resources.Edit);
                           //command.Destroy();
                       });

                    columns.Bound(p => p.ID).Width(150).Locked(true); //EditorTemplateName (/Shared/EditorTempaltes/ddlCountries) used to Display Dropdown list and it will return Int value to Controller
                    columns.Bound(p => p.ExchangeRateID).Title(MessageColumnCaptions.TB_ExchangeRateHistoryCaption("ExchangeRateID")).Width(150).Locked(true);
                    columns.Bound(p => p.Currency).Title(MessageColumnCaptions.TB_ExchangeRateHistoryCaption("CurrencyID")).Width(150).Locked(true);
                    columns.Bound(p => p.Date).Title(MessageColumnCaptions.TB_ExchangeRateHistoryCaption("DateID")).ClientTemplate("#= kendo.toString(Date,'dd/MM/yyyy HH:mm:ss') #").Width(150);
                    columns.Bound(p => p.Rate).Title(MessageColumnCaptions.TB_ExchangeRateHistoryCaption("Rate")).Width(150);
                    columns.Bound(p => p.LogDateTime).Title(MessageColumnCaptions.TB_ExchangeRateHistoryCaption("LogDateTime")).ClientTemplate("#= kendo.toString(LogDateTime,'dd/MM/yyyy HH:mm:ss') #").Width(150);
                    columns.Bound(p => p.LogUserID).Title(MessageColumnCaptions.TB_ExchangeRateHistoryCaption("LogUserID")).Width(150);
                    columns.Bound(p => p.OpDateTime).Title(MessageColumnCaptions.TB_ExchangeRateHistoryCaption("OpDateTime")).ClientTemplate("#= kendo.toString(OpDateTime,'dd/MM/yyyy HH:mm:ss') #").Width(150);
                    columns.Bound(p => p.OpUserID).Title(MessageColumnCaptions.TB_ExchangeRateHistoryCaption("OpUserID")).Width(150);
                })
                .ToolBar(tool =>
                {
                    // tool.Custom().Name("cmdAddNewRecord")
                    //.Text(Resources.NewRecord)
                    //.HtmlAttributes(new { @id = "cmdAddNewRecord" });
                    tool.Excel().Text(Resources.ExporttoExcel);
                })
                .Editable(editable => editable.Mode(GridEditMode.InLine))
                    .Scrollable(scrollable => scrollable.Height(430))
                //.Scrollable().HtmlAttributes(new { @style = "width:1200px;" })

                .Pageable(p => p.Refresh(true))
                .Sortable()
                .Navigatable()
                .Groupable()
                .Scrollable(scr => scr.Height(370))
                .Filterable()
                .Excel(excel => excel
                .FileName("TB_ExchangeRateHistoryExt.xlsx")
                .Filterable(true))

)

<script id="AddNewRecord">

                $("#cmdAddNewRecord").click(function (e) {

                    var table = $("#TB_ExchangeRateHistoryExt_Grid").data("kendoGrid");
                    var sorting = table.dataSource.sort();

                    if (sorting) {
                        table.dataSource.sort(null);
                    }
                    table.addRow();
                    e.preventDefault();
                    //put custom logic here
                });
</script>

<script>

    $("#btnfilter").click(function () {
        $filter = new Array();
        $ExchangeRateID = $("#txtExchangeRateID").val();
        $CurrencyText = $("#drbCurrency").data("kendoDropDownList").text();
        $CurrencyValue = $("#drbCurrency").val();
        $DateText = $("#drbDate").data("kendoDropDownList").text();
        $DateValue = $("#drbDate").val();
        $StartDate = $("#datetimepickerStart").data("kendoDatePicker").value();
        $EndDate = $("#datetimepickerEnd").data("kendoDatePicker").value();

        if ($ExchangeRateID) {
            $filter.push({ field: "ExchangeRateID", operator: "equals", value: String($ExchangeRateID) });
        }
        if ($CurrencyValue) {
            $filter.push({ field: "Currency", operator: "contains", value: $CurrencyText });
        }
        if ($DateValue) {
            $filter.push({ field: "Date", operator: "EqualTo", value: $DateText });
        }
        if ($StartDate) {
            $filter.push({ field: "LogDateTime", operator: "IsGreaterThanOrEqualTo", value: $StartDate });
        }
        if ($EndDate) {
            $filter.push({ field: "LogDateTime", operator: "IsLessThanOrEqualTo", value: $EndDate });
        }
        var grid = $("#TB_ExchangeRateHistoryExt_Grid").data("kendoGrid");
        grid.dataSource.filter($filter);
    });

    var AllSelectText = '@Resources.ListAllExpression'

    $(document).ready(function () {


            var json = {}
            $.ajax({
                type: "GET",
                url: "/DropDownLists/GetCurrencies",
                data: json,
                datatype: "json",
                success: function (data) {

                    $("#drbCurrency").kendoDropDownList({
                        filter: "contains",
                        Name: "CurrencyID",
                        optionLabel: AllSelectText,
                        dataTextField: "Currency",
                        dataValueField: "CurrencyID ",
                        dataSource: data
                    });

                }
            })

            var json = {}
            $.ajax({
                type: "GET",
                url: "/DropDownLists/GetDates",
                data: json,
                datatype: "json",
                success: function (data) {
                    //alert
                    $("#drbDate").kendoDropDownList({
                        filter: "contains",
                        Name: "DateID",
                        optionLabel: AllSelectText,
                        dataTextField: "Date",
                        dataValueField: "DateID ",
                        dataSource: data
                    });

                }
            })
        $("#datetimepickerStart").kendoDatePicker({
            animation: {
                close: {
                    effects: "zoom:out",
                    duration: 300
                }
            }
        });
        $("#datetimepickerEnd").kendoDatePicker({
            animation: {
                close: {
                    effects: "zoom:out",
                    duration: 300
                }
            }
        });

    });





    function clearFiter() {
        $("form.k-filter-menu button[type='reset']").trigger("click");
    }

    $("#btnClearFilter").click(function (e) {
        e.preventDefault();
        var datasource = $("#TB_ExchangeRateHistoryExt_Grid").data("kendoGrid").dataSource;
        //Clear Custom filters:
        datasource.filter([]);
        //Clear Fields
        $("#txtExchangeRateID").val('')
        //$("#txtName").val('');

        var dropdownlist = $("#drbCurrency").data("kendoDropDownList");
        dropdownlist.select("");

        var dropdownlist1 = $("#drbDate").data("kendoDropDownList");
        dropdownlist1.select("");
        //$("#txtSurName").val('');
        $("#datetimepickerStart").data("kendoDatePicker").value(null);
        $("#datetimepickerEnd").data("kendoDatePicker").value(null);
        //document.getElementById('ChkFilterCommon').checked = false
    });

</script>


